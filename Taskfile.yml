version: '3'

dotenv: ['.env']

silent: true

vars:
  ENTRYPOINT: ./cmd/timeline/
  OUTPUT_BINARY: bin/timeline
  LINTER_LOG: linter_logs
  SWAGGER_DOCS: ./docs/swagger
  # postgres://<user>:<password>@<host>:<port>/<dbname>?<params>
  MIGRATION_PATH: ./migrations
  DSN: "{{.DB}}://{{.DB_USER}}:{{.DB_PASSWD}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode={{.DB_SSLMODE}}"
  ENVS:
    - CONFIG_PATH
    - DB
    - DB_USER
    - DB_PASSWD
    - DB_HOST
    - DB_PORT
    - DB_NAME
    - DB_SSLMODE
    - MAIL_HOST
    - MAIL_PORT
    - MAIL_USER
    - MAIL_PASSWD
    - SECRET_PATH

tasks:
  dsn:
    desc: "Show DSN"
    cmds:
      - echo {{.DSN}}
  migrate-up:
    desc: "Apply migrations"
    cmds:
      - go run ./cmd/migrator/main.go --dsn={{.DSN}} --migrations-path={{.MIGRATION_PATH}}
  migrate-down:
    desc: "Reverse migrations"
    cmds:
      - migrate -database {{.DSN}} -path {{.MIGRATION_PATH}} down
  env_setup_check:
    desc: "Checks that all required environment variables are set and non-empty"
    cmds:
      - for:
          var: ENVS
        cmd: |
          if [ -z "${{ .ITEM }}" ]; then
            echo "Error: env {{ .ITEM }} isn't set." >&2
            exit 1
          fi
      - echo "All required environment variables are set."
  docker-up:
    desc: "Start docker-compose"
    cmds:
      - docker-compose up -d
      - |
        echo "Waiting for database to be ready..."
        until nc -z -v -w30 localhost {{.DB_PORT}}; do
          echo "Waiting for database connection..."
          sleep 1
        done
        echo "Database is up and running!"
  docker-rm:
    desc: "Stop and clean running containers"
    cmds:
      - docker stop $(docker ps -aq)
      - docker rm $(docker ps -aq)
      
  generate:
    desc: "Generate Swagger docs"
    cmds:
      - swag init -g ./cmd/main.go -o {{.SWAGGER_DOCS}}

  lint:
    desc: "Run GolangCI-Lint and save output to file"
    cmds:
      - golangci-lint run > {{.LINTER_LOG}}.txt

  build:
    desc: "Compile the application binary"
    cmds:
      - go build -v -o {{.OUTPUT_BINARY}} {{.ENTRYPOINT}}

  clean:
    desc: "Remove generated Swagger docs, binary, and linter log"
    cmds:
      - rm -r {{.SWAGGER_DOCS}}/*
      - rm -r {{.OUTPUT_BINARY}}/*
      - rm -r {{.LINTER_LOG}}/*

  run:
    desc: "env-checks -> docker -> migrations -> build application -> run"
    deps: [env_setup_check, docker-up, migrate-up, build]
    cmds:
      - ./{{.OUTPUT_BINARY}}

  default:
    desc: "Default task - runs Swagger generation"
    cmds:
      - task: generate
